#+STARTIP: overview
* global settings
#+BEGIN_SRC emacs-lisp
;; skip into
(setq inhibit-startup-message t)
;; remove the icon bar
(tool-bar-mode -1)
;;name the yes or no
(fset 'yes-or-no-p 'y-or-n-p)
;; allowing right alt for symbols
(require 'iso-transl)
;; f5 to reload buffer
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* ORG-MODE
#+BEGIN_SRC emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure org-plus-contrib)

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* evil-mode - vim 
** package
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode))
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))
  (use-package evil-indent-textobject
    :ensure t))
  #+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-insert-state-map (kbd "C-u")
  (lambda ()
    (interactive)
    (evil-delete (point-at-bol) (point))))
#+END_SRC
* relative line numbers
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
  (setq linum-relative-current-symbol "->")
  (global-linum-mode 1)
  (linum-relative-mode 1))
#+END_SRC
* powerline for vim mode
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config (powerline-center-evil-theme))
#+END_SRC
* color themes
#+BEGIN_SRC emacs-lisp
(setq color-themes '())
(use-package color-theme-solarized
  :ensure t
  :config
  (customize-set-variable 'frame-background-mode 'light)
  (load-theme 'solarized t))
#+END_SRC
* file explorer
** package
#+BEGIN_SRC emacs-lisp
(use-package neotree
	:ensure t)
#+END_SRC
** file tree toggle
#+BEGIN_SRC emacs-lisp
(require 'neotree)
(global-unset-key (kbd "M-1"))
(global-set-key (kbd "M-1") 'neotree-toggle)

(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
(evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
(evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
#+END_SRC
* python support 
** auto complete
#+begin_src EMACS-LISP
(use-package company-jedi
  :ensure t)
#+end_src
* buffer management
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer)
#+END_SRC
* window management 
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
  #+END_SRC
* character search
** package
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t)
#+END_SRC
** keybinds
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "M-f") 'avy-goto-char)
(define-key evil-operator-state-map (kbd "M-f") 'avy-goto-char)
(define-key evil-visual-state-map (kbd "M-f") 'avy-goto-char)
#+END_SRC
* auto complete plugin
** package
#+BEGIN_SRC emacs-lisp
 (use-package company
   :ensure t
   :diminish company-mode
   :init
   (add-hook 'after-init-hook 'global-company-mode)
   :config
   (defun my/python-mode-hook ()
     (add-to-list 'company-backends 'company-jedi))
   (add-hook 'python-mode-hook 'my/python-mode-hook)
    (setq company-dabbrev-downcase nil))
#+END_SRC
** key binding
#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map (kbd "C-SPC") 'company-complete-common)
#+END_SRC

